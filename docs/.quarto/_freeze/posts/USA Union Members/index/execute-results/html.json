{
  "hash": "6b7b1cabefca0811849a2d6af70a50fa",
  "result": {
    "markdown": "---\ntitle: \"USA's Union Members\"\ndescription: \"Shiny app developed for the TidyTuesday of 05/09/2023\"\nauthor: \"Egoitz Carral\"\ndate: \"09/08/2023\"\nserver: shiny\nimage: \"image.jpg\"\ncategories: [2023, Shiny App, Map] \ndate-modified: \"09/10/2023\"\nbibliography: referencias.bib\ncsl: apa.csl\nabout:\n  template: marquee\n  links: \n    - icon: github\n      text: Full Code\n      href: https://github.com/Egoitzct/TidyTuesday/tree/main/2023/2023_09_05\n---\n\n\nFor the TidyTuesday of 05/09/2023 [@rfordatascience-2023] [@Macpherson-2023], after looking at the data, I choose to make a Shiny App. First of all, I selected the variables I wanted (the state, p_members, members, sector and year). I started making a two different plots, one for looking the percentage of union members per sector and the other one for looking at the evolution of union members percentage in each state.\n\nAfter doing that, I use *leaflet* for making an interactive map. Then, I adpted the plots and map so they became functions created and use them for the final result, the *Shiny App*.\n\n::: column-screen-inset\n\n::: {.cell .fig-cap-location-bottom context='server'}\n\n:::\n\n:::\n\nThe objective of the map is to give an easy view of the number of union members in the United States, and how this number has changed through the years. The map also privides an useful barplot in which can be seen the percentage of union members per sector.\n\n::: {#refs} :::\n\npreserve591f05f0498e8441\npreserve97ce19aa95157009\n\n<!--html_preserve-->\n<script type=\"application/shiny-prerendered\" data-context=\"dependencies\">\n{\"type\":\"list\",\"attributes\":{},\"value\":[]}\n</script>\n<!--/html_preserve-->\n<!--html_preserve-->\n<script type=\"application/shiny-prerendered\" data-context=\"execution_dependencies\">\n{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"packages\"]}},\"value\":[{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"packages\",\"version\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"data.frame\"]},\"row.names\":{\"type\":\"integer\",\"attributes\":{},\"value\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"base\",\"cli\",\"compiler\",\"datasets\",\"digest\",\"ellipsis\",\"evaluate\",\"fastmap\",\"graphics\",\"grDevices\",\"htmltools\",\"htmlwidgets\",\"httpuv\",\"jsonlite\",\"knitr\",\"later\",\"lifecycle\",\"magrittr\",\"methods\",\"mime\",\"promises\",\"R6\",\"Rcpp\",\"rlang\",\"rmarkdown\",\"rstudioapi\",\"shiny\",\"stats\",\"tools\",\"utils\",\"xfun\",\"xtable\",\"yaml\"]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"4.3.1\",\"3.6.1\",\"4.3.1\",\"4.3.1\",\"0.6.31\",\"0.3.2\",\"0.21\",\"1.1.1\",\"4.3.1\",\"4.3.1\",\"0.5.5\",\"1.6.2\",\"1.6.11\",\"1.8.5\",\"1.43\",\"1.3.1\",\"1.0.3\",\"2.0.3\",\"4.3.1\",\"0.12\",\"1.2.0.1\",\"2.5.1\",\"1.0.10\",\"1.1.1\",\"2.22\",\"0.14\",\"1.7.4\",\"4.3.1\",\"4.3.1\",\"4.3.1\",\"0.39\",\"1.8-4\",\"2.3.7\"]}]}]}\n</script>\n<!--/html_preserve-->",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {
      "preserve591f05f0498e8441": "\n<script type=\"application/shiny-prerendered\" data-context=\"server\">\n  \nlibrary(tidyverse)\nlibrary(leaflet)\n\nstates <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-09-05/states.csv')\n\n\n# Plots -------------------------------------------------------------------\n\nsector_plot <- function(state_name = \"Arizona\", selected_year = 2022) {\n  states %>% \n    select(state, sector, p_members, year) %>% \n    filter(state == state_name & year == selected_year) %>% \n    group_by(state, sector) %>% \n    summarise(p_members = sum(p_members)) %>% \n    arrange(desc(p_members)) %>% \n    ggplot(aes(x = sector, y = p_members, fill = sector)) +\n      geom_bar(stat = \"identity\") +\n      scale_fill_brewer(palette = \"RdYlGn\") +\n      theme_minimal(\n        base_size = 14,\n        base_family = \"sans\"\n      ) +\n      labs(\n        title = paste(\"Percentage of union\\nmembers by sector in\\n\", state_name, sep=\"\"),\n        subtitle = paste(\"Year:\", selected_year),\n        y = \"Union members (%)\"\n      ) +\n      theme(\n        legend.position = \"none\",\n        panel.grid.major = element_line(linetype = 3, color = \"black\"),\n        panel.grid.major.y = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        axis.title.y = element_blank(),\n        plot.title = element_text(face = \"bold\", hjust = 0, size = 16)\n      ) +\n      coord_flip(clip = \"off\") +\n      scale_y_continuous(labels = scales::label_percent())\n}\n\nyear_members_plot <- function(state_name = \"Arizona\") {\n  states %>% \n    select(state, year, members) %>% \n    filter(state == state_name) %>% \n    group_by(state, year) %>% \n    summarise(members = sum(members)) %>% \n    arrange(desc(members)) %>% \n    ggplot(aes(x = year, y = members)) +\n    geom_line(color = \"#097AD3\") +\n    geom_area(fill = \"#118AE8\", alpha = 0.5) +\n    geom_point(color = \"#097AD3\", size = 1) +\n    theme_minimal(\n      base_size = 14,\n      base_family = \"sans\"\n    ) +\n    scale_y_continuous(labels = scales::label_number(scale_cut = scales::cut_long_scale())) +\n    labs(\n      title = paste(\"Evolution of Union Members\", state_name, sep = \"\\n\"),\n      x = \"Year\"\n    ) +\n    theme(\n      panel.grid.minor.x = element_blank(),\n      panel.grid.minor.y = element_blank(),\n      plot.title = element_text(face = \"bold\", size = 16, hjust = 0.5),\n      axis.title.y = element_blank(),\n      axis.title.x = element_text(face = \"bold\")\n    )\n}\n\n# Data Processing and base map ---------------------------------------------------------\n\ndata <- states |> \n  select(year, state, p_members, sector) |>\n  group_by(state) |> \n  summarise(state = unique(state)) |> \n  arrange(state) |> \n  rename(name = state)\n\nbase_map <- function(year_s = 2022) {\n  states <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-09-05/states.csv')\n  \ndata <- states |> \n  select(year, state, p_members, sector) |>\n  filter(year == year_s & sector == \"Total\") %>% \n  group_by(state) |> \n  summarise(p_members = p_members * 100) |> \n  arrange(state) |> \n  rename(name = state)\n\nstates_map <- geojsonio::geojson_read(\"https://rstudio.github.io/leaflet/json/us-states.geojson\", what = \"sp\")\nstates_2 <- states_map@data[-52,]\nstates_map@data <- states_2\nstates_map$density <- data$p_members\n\nrm(states_2)\n\nstates_map@data <- states_map@data |> \n  rename(p_members = density)\n\nbins <- c(0, 1, 5, 10, 15, 20, 25, 30)\nnb.cols <- length(bins)\nmycolors <- colorRampPalette(RColorBrewer::brewer.pal(8, \"Blues\"))(nb.cols)\npal <- colorBin(mycolors, domain = states_map$p_members, bins = bins)\n\nlabels <- sprintf(\n  \"<strong>%s<\\u002fstrong><br/>%g&#37 union members\",\n  states_map$name, states_map$p_members\n) %>% lapply(htmltools::HTML)\n\nmap <- leaflet(states_map) |> \n  setView(-96, 37.8, 4) |> \n  addProviderTiles(\"CartoDB.Positron\") %>% addPolygons(\n  fillColor = ~pal(p_members), \n  weight = 2, \n  opacity = 1, \n  color = \"white\", \n  dashArray = \"3\", \n  fillOpacity = 0.7,\n  highlight = highlightOptions(\n    weight = 2,\n    color = \"#A4A4A4\",\n    dashArray = \"\",\n    fillOpacity = 0.7,\n    bringToFront = TRUE),\n  label = labels,\n  labelOptions = labelOptions(\n    style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n    textsize = \"15px\",\n    direction = \"auto\")) |> \n  addLegend(pal = pal, values = ~p_members, opacity = 0.7, title = NULL,\n            position = \"bottomright\")\n\n}\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n\n    # Application title\n    tabPanel(\"Interactive map\",\n             div(class=\"outer\",\n             tags$head(includeCSS(\"styles.css\")),\n             leafletOutput(\"mymap\", width = \"100%\", height = \"100%\"),\n             absolutePanel(id = \"title\", class = \"panel panel-default\", fixed = TRUE,\n                           draggable = TRUE, top = 60, left = \"auto\", right = 20, bottom = \"auto\",\n                           width =400, height = \"auto\",\n                           \n                           h2(\"United States of America's Union Members Map\"),\n                           plotOutput(\"sector\", height = 200),\n                           selectInput(\n                             \"state_choose\",\n                             label = \"Choose a State\",\n                             choices = c(data$name),\n                             selected = \"Arizona\"),\n                           sliderInput(\"year_select\", label = \"Choose a year:\", min = 1983, max = 2022, value = 2022, step = 1, sep = \"\",\n                                       ticks = FALSE),\n                           plotOutput(\"year\", height = 200),\n                           \n                          )\n                           \n            )\n            )\n    )\n\nserver <- function(input, output) {\n\n    output$mymap <- renderLeaflet({\n      base_map(year_s = input$year_select)\n    })\n    \n    observe({\n      input$year_select\n    })\n    \n    output$sector <- renderPlot({\n      sector_plot(state_name = as.character(input$state_choose), selected_year = input$year_select)\n    })\n    \n    output$year <- renderPlot({\n      year_members_plot(state_name = as.character(input$state_choose))\n    })\n    \n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n</script>\n",
      "preserve97ce19aa95157009": "\n<script type=\"application/shiny-prerendered\" data-context=\"server-extras\">\nojs_define <- function(..., .session = shiny::getDefaultReactiveDomain()) {\n  quos <- rlang::enquos(...)\n  vars <- rlang::list2(...)\n  nm <- names(vars)\n  if (is.null(nm)) {\n    nm <- rep_len(\"\", length(vars))\n  }\n  mapply(function(q, nm, val) {\n    # Infer name, if possible\n    if (nm == \"\") {\n      tryCatch({\n        nm <- rlang::as_name(q)\n      }, error = function(e) {\n        code <- paste(collapse = \"\\n\", deparse(rlang::f_rhs(q)))\n        stop(\"ojs_define() could not create a name for the argument: \", code)\n      })\n    }\n    .session$output[[nm]] <- val\n    outputOptions(.session$output, nm, suspendWhenHidden = FALSE)\n    .session$sendCustomMessage(\"ojs-export\", list(name = nm))\n    NULL\n  }, quos, nm, vars, SIMPLIFY = FALSE, USE.NAMES = FALSE)\n  invisible()\n}\n</script>\n"
    },
    "postProcess": true
  }
}